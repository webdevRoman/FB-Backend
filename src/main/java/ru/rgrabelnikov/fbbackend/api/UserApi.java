/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.rgrabelnikov.fbbackend.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import reactor.core.publisher.Mono;
import ru.rgrabelnikov.fbbackend.dto.IdNameDto;
import ru.rgrabelnikov.fbbackend.dto.UserAuthDto;
import ru.rgrabelnikov.fbbackend.dto.UserRegistrationDto;
import ru.rgrabelnikov.fbbackend.dto.ValidationErrorDto;

import java.util.List;

@Validated
public interface UserApi {

    @Operation(summary = "Получение списка секретных вопросов", description = "", tags = {"User"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Список секретных вопросов",
                    content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IdNameDto.class))))
    })
    @RequestMapping(value = "/user/registration/meta",
            produces = {"application/json"},
            method = RequestMethod.GET)
    Mono<ResponseEntity<List<IdNameDto>>> getSecretQuestions();


    @Operation(summary = "Авторизация", description = "", tags = {"User"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Успешный ответ с токеном"),

            @ApiResponse(responseCode = "400", description = "Ошибка валидации",
                    content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ValidationErrorDto.class))))
    })
    @RequestMapping(value = "/user/login",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    Mono<ResponseEntity<?>> login(
            @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody UserAuthDto body
    );


    @Operation(summary = "Регистрация пользователя", description = "", tags = {"User"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Успешная регистрация"),

            @ApiResponse(responseCode = "400", description = "Ошибка валидации",
                    content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ValidationErrorDto.class))))
    })
    @RequestMapping(value = "/user/register",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    Mono<ResponseEntity<?>> register(
            @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Mono<UserRegistrationDto> body
    );

}